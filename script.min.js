"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @class Model
 *
 * Manages the data of the application.
 */
var Model =
    /*#__PURE__*/
    function () {
        function Model() {
            _classCallCheck(this, Model);

            this.dockets = JSON.parse(localStorage.getItem('dockets')) || [];
        }

        _createClass(Model, [{
            key: "bindDocketListChanged",
            value: function bindDocketListChanged(callback) {
                this.onDocketListChanged = callback;
            }
        }, {
            key: "_commit",
            value: function _commit(dockets) {
                this.onDocketListChanged(dockets);
                localStorage.setItem('dockets', JSON.stringify(dockets));
            }
        }, {
            key: "addDocket",
            value: function addDocket(DocketText) {
                var Docket = {
                    id: this.dockets.length > 0 ? this.dockets[this.dockets.length - 1].id + 1 : 1,
                    text: DocketText,
                    complete: false
                };
                this.dockets.push(Docket);

                this._commit(this.dockets);
            }
        }, {
            key: "editDocket",
            value: function editDocket(id, updatedText) {
                this.dockets = this.dockets.map(function (Docket) {
                    return Docket.id === id ? {
                        id: Docket.id,
                        text: updatedText,
                        complete: Docket.complete
                    } : Docket;
                });

                this._commit(this.dockets);
            }
        }, {
            key: "deleteDocket",
            value: function deleteDocket(id) {
                this.dockets = this.dockets.filter(function (Docket) {
                    return Docket.id !== id;
                });

                this._commit(this.dockets);
            }
        }, {
            key: "toggleDocket",
            value: function toggleDocket(id) {
                this.dockets = this.dockets.map(function (Docket) {
                    return Docket.id === id ? {
                        id: Docket.id,
                        text: Docket.text,
                        complete: !Docket.complete
                    } : Docket;
                });

                this._commit(this.dockets);
            }
        }]);

        return Model;
    }();
/**
 * @class View
 *
 * Visual representation of the model.
 */


var View =
    /*#__PURE__*/
    function () {
        function View() {
            _classCallCheck(this, View);

            this.app = this.getElement('#root');
            this.form = this.createElement('form');
            this.input = this.createElement('input');
            this.input.type = 'text';
            this.input.placeholder = 'Add Docket';
            this.input.name = 'Docket';
            this.submitButton = this.createElement('button');
            this.submitButton.textContent = 'Submit';
            this.form.append(this.input, this.submitButton);
            this.title = this.createElement('h1');
            this.title.textContent = 'dockets';
            this.DocketList = this.createElement('ul', 'Docket-list');
            this.app.append(this.title, this.form, this.DocketList);
            this._temporaryDocketText = '';

            this._initLocalListeners();
        }

        _createClass(View, [{
            key: "_resetInput",
            value: function _resetInput() {
                this.input.value = '';
            }
        }, {
            key: "createElement",
            value: function createElement(tag, className) {
                var element = document.createElement(tag);
                if (className) element.classList.add(className);
                return element;
            }
        }, {
            key: "getElement",
            value: function getElement(selector) {
                var element = document.querySelector(selector);
                return element;
            }
        }, {
            key: "displaydockets",
            value: function displaydockets(dockets) {
                var _this = this;

                // Delete all nodes
                while (this.DocketList.firstChild) {
                    this.DocketList.removeChild(this.DocketList.firstChild);
                } // Show default message


                if (dockets.length === 0) {
                    var p = this.createElement('p');
                    p.textContent = 'Nothing to do! Add a task?';
                    this.DocketList.append(p);
                } else {
                    // Create nodes
                    dockets.forEach(function (Docket) {
                        var li = _this.createElement('li');

                        li.id = Docket.id;

                        var checkbox = _this.createElement('input');

                        checkbox.type = 'checkbox';
                        checkbox.checked = Docket.complete;

                        var span = _this.createElement('span');

                        span.contentEditable = true;
                        span.classList.add('editable');

                        if (Docket.complete) {
                            var strike = _this.createElement('s');

                            strike.textContent = Docket.text;
                            span.append(strike);
                        } else {
                            span.textContent = Docket.text;
                        }

                        var deleteButton = _this.createElement('button', 'delete');

                        deleteButton.textContent = 'Delete';
                        li.append(checkbox, span, deleteButton); // Append nodes

                        _this.DocketList.append(li);
                    });
                } // Debugging


                console.log(dockets);
            }
        }, {
            key: "_initLocalListeners",
            value: function _initLocalListeners() {
                var _this2 = this;

                this.DocketList.addEventListener('input', function (event) {
                    if (event.target.className === 'editable') {
                        _this2._temporaryDocketText = event.target.innerText;
                    }
                });
            }
        }, {
            key: "bindAddDocket",
            value: function bindAddDocket(handler) {
                var _this3 = this;

                this.form.addEventListener('submit', function (event) {
                    event.preventDefault();

                    if (_this3._DocketText) {
                        handler(_this3._DocketText);

                        _this3._resetInput();
                    }
                });
            }
        }, {
            key: "bindDeleteDocket",
            value: function bindDeleteDocket(handler) {
                this.DocketList.addEventListener('click', function (event) {
                    if (event.target.className === 'delete') {
                        var id = parseInt(event.target.parentElement.id);
                        handler(id);
                    }
                });
            }
        }, {
            key: "bindEditDocket",
            value: function bindEditDocket(handler) {
                var _this4 = this;

                this.DocketList.addEventListener('focusout', function (event) {
                    if (_this4._temporaryDocketText) {
                        var id = parseInt(event.target.parentElement.id);
                        handler(id, _this4._temporaryDocketText);
                        _this4._temporaryDocketText = '';
                    }
                });
            }
        }, {
            key: "bindToggleDocket",
            value: function bindToggleDocket(handler) {
                this.DocketList.addEventListener('change', function (event) {
                    if (event.target.type === 'checkbox') {
                        var id = parseInt(event.target.parentElement.id);
                        handler(id);
                    }
                });
            }
        }, {
            key: "_DocketText",
            get: function get() {
                return this.input.value;
            }
        }]);

        return View;
    }();
/**
 * @class Controller
 *
 * Links the user input and the view output.
 *
 * @param model
 * @param view
 */


var Controller = function Controller(model, view) {
    var _this5 = this;

    _classCallCheck(this, Controller);

    _defineProperty(this, "onDocketListChanged", function (dockets) {
        _this5.view.displaydockets(dockets);
    });

    _defineProperty(this, "handleAddDocket", function (DocketText) {
        _this5.model.addDocket(DocketText);
    });

    _defineProperty(this, "handleEditDocket", function (id, DocketText) {
        _this5.model.editDocket(id, DocketText);
    });

    _defineProperty(this, "handleDeleteDocket", function (id) {
        _this5.model.deleteDocket(id);
    });

    _defineProperty(this, "handleToggleDocket", function (id) {
        _this5.model.toggleDocket(id);
    });

    this.model = model;
    this.view = view; // Explicit this binding

    this.model.bindDocketListChanged(this.onDocketListChanged);
    this.view.bindAddDocket(this.handleAddDocket);
    this.view.bindEditDocket(this.handleEditDocket);
    this.view.bindDeleteDocket(this.handleDeleteDocket);
    this.view.bindToggleDocket(this.handleToggleDocket); // Display initial dockets

    this.onDocketListChanged(this.model.dockets);
};

var app = new Controller(new Model(), new View());